/* 목차
0x00 정의와 성질
0x01 기능과 구현
0x02 STL list
0x03 연습 문제
*/

//0x00 정의와 성질
/*
1. 연결 리스트에서는 k번째 원소를 찾기 위해 O(k)
2. 연결 리스트에서는 임의의 위치에 원소를 추가하거나 임의 위치의 원소 제거가 O(1)
3. 메모리 상에 데이터들이 연속해있지 않으니까 Cache hit rate가 낮지만 할당이 쉬움

종류 : 단일, 이중, 원형 연결리스트

// 배열과 연결 리스트의 비교

// 1. k번째 원소의 접근 시간
// 배열: O(1) - k번째 원소에 즉시 접근 가능
// 연결 리스트: O(k) - k번째 원소에 접근하려면 처음부터 순차적으로 탐색 필요

// 2. 임의 위치에 원소 추가/제거 시간
// 배열: O(N) - 추가/제거 시 다른 원소들을 이동해야 함
// 연결 리스트: O(1) - 현재 위치에서 추가/제거 가능
//    단, 특정 위치에 추가/제거하려면 해당 위치까지 접근하는 시간이 필요 (평균적으로 O(k))

// 3. 메모리 상의 배치
// 배열: 연속적인 메모리 공간에 배치
// 연결 리스트: 불연속적인 메모리 공간에 배치

// 4. 추가적인 메모리 공간 (overhead)
// 배열: 추가적인 메모리 공간이 거의 필요하지 않음 (길이 정보를 저장하는 int 1개 정도)
// 연결 리스트: 각 원소가 다음 원소 (혹은 이전과 다음 원소)의 주소값을 저장해야 함
//    32비트 컴퓨터: 주소값이 32비트 (4바이트) 단위, 따라서 4N 바이트 추가 필요
//    64비트 컴퓨터: 주소값이 64비트 (8바이트) 단위, 따라서 8N 바이트 추가 필요

// 요약
// 배열:
//  - 장점: 빠른 인덱스 접근 (O(1)), 메모리 사용 효율적
//  - 단점: 크기 변경 어려움, 임의 위치 추가/제거 비용 큼 (O(N))
// 연결 리스트:
//  - 장점: 크기 제한 없음, 임의 위치 추가/제거 효율적 (O(1))
//  - 단점: 느린 인덱스 접근 (O(k)), 추가적인 메모리 사용 (주소값 저장)

*/

//0x01 기능과 구현
/*
// 2. 연결 리스트에서 제공되는 연산

// 2.1 임의의 위치에 있는 원소 확인/변경
// - 배열: O(1)
// - 연결 리스트: O(k) - 첫 번째 원소부터 순차적으로 방문해야 함

// 2.2 임의의 위치에 원소 추가
// - 배열: O(N) - 원소들을 이동해야 함
// - 연결 리스트: O(1) - 다음 원소의 주소만 변경 (단, 추가 위치의 주소를 알고 있을 때)

// 2.3 임의의 위치의 원소 제거
// - 배열: O(N) - 원소들을 이동해야 함
// - 연결 리스트: O(1) - 이전 원소와 다음 원소의 포인터만 변경

// 3. 연결 리스트의 대표적인 사용 사례
// - 텍스트 에디터: 커서 이동 및 글자 추가/제거가 빈번하게 발생하는 경우
// - 임의의 위치에서 원소를 추가/제거하는 연산이 많이 필요할 때 유용

// 4. 연결 리스트의 구현
// - 정석적인 구현: NODE 구조체나 클래스를 사용하여 동적 할당
// - 야매 연결 리스트: 배열을 사용하여 pre와 nxt 배열로 이전/다음 원소의 인덱스를 저장

// 5. 야매 연결 리스트의 구현
// - dat[i]: i번지 원소의 값
// - pre[i]: i번지 원소의 이전 원소의 인덱스
// - nxt[i]: i번지 원소의 다음 원소의 인덱스
// - unused: 현재 사용되지 않는 인덱스, 새로운 원소가 들어갈 인덱스
// - 0번지는 연결 리스트의 시작 원소로 고정된 dummy node

// 6. 야매 연결 리스트의 traverse 함수
// - 연결 리스트의 모든 원소를 출력
// - cur 변수를 사용하여 각 원소의 주소를 이동하며 dat를 출력

// 7. insert 함수
// - addr: 원소를 추가할 위치의 주소
// - insert(1, 30): 1번지 뒤에 30을 추가
// - 새 원소의 pre, nxt 값을 설정하고, 이전/다음 원소의 포인터 변경
// - unused 값을 증가시켜 다음 insert에 사용

// 8. erase 함수
// - addr: 제거할 원소의 주소
// - erase(1): 1번지의 원소를 제거
// - 이전 원소의 nxt를 변경하고, 다음 원소의 pre를 변경
// - 제거된 원소의 dat, pre, nxt 값은 변경하지 않아도 됨

*/
// 1475_2.cpp는 내 풀이(1475.cpp)와 바킹독님 풀이 비교이다.

/*
바킹독님의 방식은 숫자를 하나씩 추출하여 빈도를 계산합.
제 방식은 문자열로 입력받아 문자를 숫자로 변환하여 빈도를 계산.
*/

/*
바킹독님의 방식은 6과 9를 제외한 최대 빈도를 먼저 계산하고, 6과 9의 빈도를 합쳐서 처리.
제 방식은 6과 9의 빈도를 합쳐서 계산한 후, 배열에 저장하고 최대 빈도를 찾기.
*/

/* 차이가 크지 않지만 메모리도 2020KB, 2024KB로 바킹독님이 작다*/
#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int N, a[10] = {}, ans = 0;
    cin >> N;

    // 자리수 추출 (이 방법이 좋은 듯)
    while (N) {
        a[N % 10]++;    // N의 마지막 자릿수를 추출
        N /= 10;        // 해당 자릿수의 빈도를 증가
    }   

    // 6과 9를 제외한 최대 빈도 계산
    for (int i = 0; i < 10; i++) {
        if (i == 6 || i == 9) continue;
        ans = max(ans, a[i]);
    }
    // (a[6]+a[9])/2를 올림한 값이 6, 9에 대한 필요한 세트의 수이므로 (a[6]+a[9]+1)/2을 계산
    ans = max(ans, (a[6] + a[9] + 1) / 2);
    cout << ans;
}

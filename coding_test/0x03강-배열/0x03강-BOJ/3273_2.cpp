#include <bits/stdc++.h>
using namespace std;

int a[1000001] = {};  // 각 자연수의 존재 여부를 저장하는 배열, 아래에서 x-a[i]가 1000000보다 큰 경우를 예외처리하기 싫어서 그냥 배열을 최대 200만으로 잡음
bool occur[2000001];  // 각 숫자가 등장했는지를 체크하는 배열
int n, x;

int main(void) {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int ans = 0;
    cin >> n;
    for (int i = 0; i < n; i++) cin >> a[i];
    cin >> x;

    for (int i = 0; i < n; i++) {
        // x - a[i]가 존재하는지 확인
        if (x - a[i] > 0 && occur[x - a[i]]) ans++;
        occur[a[i]] = true;
    }
    cout << ans;
}

/*
공간복잡도 O(2000000), 시간복잡도 O(n)에 풀이가 가능. 만약 입력 형식에서
x가 a 배열보다 먼저 주어졌다면 int a[] 배열은 필요가 없었음.
*/

/*
내 풀이: unordered_map을 사용하여 동적 크기의 해시맵을 사용합니다.
바킹독님 풀이: 고정 크기의 배열을 사용하여 숫자의 존재 여부를 기록합니다.
*/

/*
내 풀이: 입력 크기에 따라 동적으로 메모리를 사용합니다.
바킹독님 풀이: 고정된 크기의 메모리를 사용합니다 (bool occur[2000001]).
*/

//요약
/*
내 풀이는 unordered_map을 사용하여 유연하고 간결한 접근 방식을 제공합니다. 다만, 메모리 사용량이 입력 크기에 따라 달라질 수 있습니다.
바킹독님 풀이는 고정 크기의 배열을 사용하여 메모리 사용량이 일정하며, 상수 시간 접근을 제공하지만, 숫자 범위가 제한되고 메모리 낭비가 있을 수 있습니다.
*/